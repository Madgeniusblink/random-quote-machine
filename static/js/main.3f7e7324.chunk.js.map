{"version":3,"sources":["components/quote-box/quote-box.component.jsx","components/loading-spinner/loading-spinner.styles.jsx","components/loading-spinner/loading-spinner.component.jsx","App.js","serviceWorker.js","index.js"],"names":["library","add","faTwitter","QuoteBox","quote","author","getRandomQuote","onClickShareWithTwitter","id","onClick","href","encodeURIComponent","icon","SpinnerOverlay","styled","div","SpinnerContainer","LoadingSpinner","App","props","dataFetching","getData","axios","get","then","response","randomQuote","data","quotes","Math","floor","random","length","setState","isLoading","catch","error","event","preventDefault","state","url","window","self","top","e","inIframe","open","this","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAKAA,IAAQC,IAAIC,KAEZ,IAuBeC,EAvBE,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,OAAQC,EAA8C,EAA9CA,eAA8C,EAA9BC,wBAC/C,OACI,yBAAKC,GAAG,aACJ,wBAAIA,GAAG,QAAQJ,GACf,uBAAGI,GAAG,UAAUH,GAChB,4BACIG,GAAG,YACHC,QAASH,GAFb,aAaA,uBAAGI,KAAI,qFAAgFC,mBAAmB,IAAD,OAAKP,EAAL,aAAeC,KAAaG,GAAG,eAAc,kBAAC,IAAD,CAAiBI,KAAMV,S,0uBCvBlL,IAAMW,EAAiBC,IAAOC,IAAV,KAQdC,EAAmBF,IAAOC,IAAV,KCCdE,EARQ,WACnB,OACI,kBAACJ,EAAD,KACI,kBAACG,EAAD,QCqFGE,E,YArFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,aAAe,KAVI,EAWnBC,QAAU,WACRC,IACGC,IAAI,0IACJC,MAAK,SAAAC,GACJ,IAAIC,EAAcD,EAASE,KAAKC,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,EAASE,KAAKC,OAAOI,SACvF,OAAO,EAAKC,SAAS,CACnBN,KAAMF,EAASE,KAAKC,OACpBvB,OAAQqB,EAAYrB,OACpBD,MAAOsB,EAAYtB,MACnB8B,WAAW,OAEZC,OAAM,SAAAC,GAAK,OAAI,EAAKH,SAAS,CAC9BG,QACAF,WAAW,QAxBE,EAqCnB5B,eAAiB,SAAC+B,GAChBA,EAAMC,iBACN,IAAIZ,EAAc,EAAKa,MAAMZ,KAAKE,KAAKC,MAAMD,KAAKE,SAAW,EAAKQ,MAAMZ,KAAKK,SAC7E,EAAKC,SAAS,CACZ7B,MAAOsB,EAAYtB,MACnBC,OAAQqB,EAAYrB,UA1CL,EA+CnBE,wBAA0B,SAAC8B,GACzBA,EAAMC,iBACN,IAAiBE,EAQjB,IAPiB,WACf,IACE,OAAOC,OAAOC,OAASD,OAAOE,IAC9B,MAAOC,GACP,OAAO,GAGPC,GACF,OATeL,EASA,8EAAD,OAA+E7B,mBAAmB,IAAD,OAAK,EAAK4B,MAAMnC,MAAhB,aAA0B,EAAKmC,MAAMlC,UAT7HoC,OAAOK,KAAKN,EAAK,QAAS,mGA/CnD,EAAKD,MAAQ,CACXZ,KAAM,GACNvB,MAAO,GACPC,OAAQ,GACR6B,WAAW,EACXE,MAAO,MAPQ,E,iFA8BjBW,KAAK3B,aAAe2B,KAAK1B,Y,6CAIzB0B,KAAK3B,iB,+BA4BG,IAAD,EAC8B2B,KAAKR,MAAlCnC,EADD,EACCA,MAAOC,EADR,EACQA,OAAQ6B,EADhB,EACgBA,UACvB,OACE,6BACE,gEAEGA,EAQC,kBAAC,EAAD,MAPA,kBAAC,EAAD,CACA9B,MAAOA,EACPC,OAAQA,EACRC,eAAgByC,KAAKzC,eACrBC,wBAAyBwC,KAAKxC,+B,GA1ExByC,aCOEC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.3f7e7324.chunk.js","sourcesContent":["import React from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\n\nlibrary.add(faTwitter);\n\nconst QuoteBox = ({ quote, author, getRandomQuote, onClickShareWithTwitter }) => {\n    return (\n        <div id=\"quote-box\">\n            <h2 id=\"text\">{quote}</h2>\n            <p id=\"author\">{author}</p>\n            <button\n                id=\"new-quote\"\n                onClick={getRandomQuote}\n            >\n                New Quote\n             </button>\n            {/* <button\n                id=\"tweet-quote\"\n                onClick={onClickShareWithTwitter}\n            >\n                <FontAwesomeIcon icon={faTwitter} />\n            </button> */}\n            \n            <a href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${encodeURIComponent(`\"${quote}\" ${author}`)}`} id=\"tweet-quote\"><FontAwesomeIcon icon={faTwitter} /></a>\n        </div>\n    )\n}\n\nexport default QuoteBox\n","import styled from \"styled-components\";\n\nexport const SpinnerOverlay = styled.div`\n    height: 60vh;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n    display: inline-block;\n    width: 50px;\n    height: 50px;\n    border: 3px solid rgba(195, 195, 195, 0.6);\n    border-radius: 50%;\n    border-top-color: #636767;\n    animation: spin 1s ease-in-out infinite;\n    -webkit-animation: spin 1s ease-in-out infinite;\n    @keyframes spin {\n        to {\n        -webkit-transform: rotate(360deg);\n        }\n    }\n    @-webkit-keyframes spin {\n        to {\n        -webkit-transform: rotate(360deg);\n        }\n    }\n`;","import React from 'react'\nimport { SpinnerOverlay, SpinnerContainer } from './loading-spinner.styles'\n\nconst LoadingSpinner = () => {\n    return (\n        <SpinnerOverlay>\n            <SpinnerContainer />\n        </SpinnerOverlay>\n    )\n}\n\nexport default LoadingSpinner\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport QuoteBox from './components/quote-box/quote-box.component'\nimport LoadingSpinner from './components/loading-spinner/loading-spinner.component'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [],\n      quote: '',\n      author: '',\n      isLoading: true,\n      error: null\n    }\n  }\n  dataFetching = null;\n  getData = () => {\n    axios\n      .get(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\")\n      .then(response => {\n        let randomQuote = response.data.quotes[Math.floor(Math.random() * response.data.quotes.length)]\n        return this.setState({\n          data: response.data.quotes,\n          author: randomQuote.author,\n          quote: randomQuote.quote,\n          isLoading: false,\n        })\n      }).catch(error => this.setState({ \n        error, \n        isLoading: false,\n      }))\n  }\n\n  \n  componentDidMount() {\n    this.dataFetching = this.getData();\n  }\n\n  componentWillUnmount() {\n    this.dataFetching()\n  }\n\n  getRandomQuote = (event) => {\n    event.preventDefault();\n    let randomQuote = this.state.data[Math.floor(Math.random() * this.state.data.length)]\n    this.setState({\n      quote: randomQuote.quote,\n      author: randomQuote.author\n    }) \n    \n  }\n\n  onClickShareWithTwitter = (event) => {\n    event.preventDefault();\n    const openURL = (url) => window.open(url, 'Share', 'width=550, height=400, toolbar=0, scrollbars=1 ,location=0 ,statusbar=0,menubar=0, resizable=0');\n    const inIframe = () => { \n      try { \n        return window.self !== window.top; \n      } catch (e) { \n        return true; \n      } \n    }\n    if(!inIframe()) {\n      return openURL(`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${encodeURIComponent(`\"${this.state.quote}\" ${this.state.author}`)}`);\n    }\n  }\n  \n  render() {\n    const { quote, author, isLoading } = this.state\n    return (\n      <div>\n        <h1>Post something on Twitter today!</h1>\n        {\n          !isLoading ? (\n            <QuoteBox \n            quote={quote}\n            author={author}\n            getRandomQuote={this.getRandomQuote}\n            onClickShareWithTwitter={this.onClickShareWithTwitter}\n          />\n          ) : (\n            <LoadingSpinner />\n          )\n        }\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}