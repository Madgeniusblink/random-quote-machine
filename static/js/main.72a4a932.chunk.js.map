{"version":3,"sources":["components/quote-box/quote-box.styles.js","components/quote-box/quote-box.component.jsx","components/loading-spinner/loading-spinner.styles.jsx","components/loading-spinner/loading-spinner.component.jsx","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["CardContainer","styled","article","props","color","Text","p","Author","Title","h1","ButtonsContainer","div","Button","button","ShareButton","NewQuoteButton","library","add","faTwitter","QuoteBox","quote","author","getRandomQuote","onClickShareWithTwitter","bgColor","id","onClick","icon","SpinnerOverlay","SpinnerContainer","LoadingSpinner","AppContainer","App","dataFetching","getData","axios","get","then","response","randomQuote","data","quotes","Math","floor","random","length","setState","isLoading","catch","error","event","preventDefault","state","randcol","cardColor","randCardCol","cardBgColor","url","window","self","top","e","inIframe","encodeURIComponent","open","this","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72a4a932.chunk.js","sourcesContent":["import styled from 'styled-components';\n\n\n\nexport const CardContainer = styled.article`\n    text-align: center;\n    width: 80vw;\n    margin: 0 auto;\n    border-radius: 30px;\n    box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n    padding: 2% 5%;\n    background-color: ${props => props.color};\n\n`\nexport const Text = styled.p`\n    text-align: center;\n    font-style: italic;\n`\nexport const Author = styled.p`\n        text-align: right;\n        padding: 2% 5%;\n        font-size: 14px;\n`\n\nexport const Title = styled.h1`\n    font-weight: 400;\n`\n\nexport const ButtonsContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n    padding: 2% 5%;\n`\n\nexport const Button = styled.button`\n  width: 80px;\n  padding: 5px;\n  border: none;\n  border-radius: 5px;\n  background-color: #6c5ce7;\n  color: #dfe6e9;\n  margin-bottom: 20px;\n  font-size: 12px;\n  :hover {\n        background-color: #dfe6e9;\n        color: #6c5ce7;\n        border: 1px solid #dfe6e9;\n        cursor: pointer;\n    }\n`\n\nexport const ShareButton = styled(Button)`\n\n\n`\n\nexport const NewQuoteButton = styled(Button)`\n    \n`\n","import React from 'react'\nimport {\n    CardContainer, \n    ButtonsContainer,\n    ShareButton, \n    NewQuoteButton,\n    Text,\n    Author,\n    Title,\n} from './quote-box.styles'\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\n\nlibrary.add(faTwitter);\n\nconst QuoteBox = ({ quote, author, getRandomQuote, onClickShareWithTwitter, bgColor }) => {\n    return (\n        <CardContainer color={bgColor}>\n            <Title>Post something on Twitter today!</Title>\n            <div id=\"quote-box\">\n                <Text id=\"text\">{quote}</Text>\n                <Author id=\"author\">-{author}</Author>\n                <ButtonsContainer>\n                    <ShareButton\n                        id=\"tweet-quote\"\n                        onClick={onClickShareWithTwitter}\n                    >\n                        <FontAwesomeIcon icon={faTwitter} />\n                    </ShareButton>\n                    <NewQuoteButton\n                        id=\"new-quote\"\n                        onClick={getRandomQuote}\n                    >\n                        New Quote\n                    </NewQuoteButton>\n                </ButtonsContainer>\n                {/* <a href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${encodeURIComponent(`\"${quote}\" ${author}`)}`} id=\"tweet-quote\"><FontAwesomeIcon icon={faTwitter} /></a> */}\n            </div>\n        </CardContainer>\n    )\n}\n\nexport default QuoteBox\n","import styled from \"styled-components\";\n\nexport const SpinnerOverlay = styled.div`\n    height: 60vh;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n    display: inline-block;\n    width: 50px;\n    height: 50px;\n    border: 3px solid rgba(195, 195, 195, 0.6);\n    border-radius: 50%;\n    border-top-color: #636767;\n    animation: spin 1s ease-in-out infinite;\n    -webkit-animation: spin 1s ease-in-out infinite;\n    @keyframes spin {\n        to {\n        -webkit-transform: rotate(360deg);\n        }\n    }\n    @-webkit-keyframes spin {\n        to {\n        -webkit-transform: rotate(360deg);\n        }\n    }\n`;","import React from 'react'\nimport { SpinnerOverlay, SpinnerContainer } from './loading-spinner.styles'\n\nconst LoadingSpinner = () => {\n    return (\n        <SpinnerOverlay>\n            <SpinnerContainer />\n        </SpinnerOverlay>\n    )\n}\n\nexport default LoadingSpinner\n","import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n    height: 100vh;  \n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    background-color: ${props => props.color};\n    color: #dfe6e9;\n\n`","import React, { Component } from 'react'\nimport axios from 'axios'\nimport QuoteBox from './components/quote-box/quote-box.component'\nimport LoadingSpinner from './components/loading-spinner/loading-spinner.component'\nimport { AppContainer } from './App.styles'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [],\n      quote: '',\n      author: '',\n      isLoading: true,\n      error: null,\n      bgColor: '#a29bfe',\n      cardBgColor: '#ff7675'\n    }\n  }\n  dataFetching = null;\n  getData = () => {\n    axios\n      .get(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\")\n      .then(response => {\n        let randomQuote = response.data.quotes[Math.floor(Math.random() * response.data.quotes.length)]\n        return this.setState({\n          data: response.data.quotes,\n          author: randomQuote.author,\n          quote: randomQuote.quote,\n          isLoading: false,\n        })\n      }).catch(error => this.setState({ \n        error, \n        isLoading: false,\n      }))\n  }\n\n  \n  componentDidMount() {\n    this.dataFetching = this.getData();\n  }\n\n  componentWillUnmount() {\n    this.dataFetching()\n  }\n\n  getRandomQuote = (event) => {\n    event.preventDefault();\n    let randomQuote = this.state.data[Math.floor(Math.random() * this.state.data.length)];\n    const color = ['#385a7c', '#f97171', '#f99192', '#8ad6cc', '#4834d4'];\n    let randcol = color[Math.floor(Math.random() * color.length)];\n\n    const cardColor = ['#f9ca24', '#ffbe76', '#f99192', '#badc58', '#6ab04c'];\n    let randCardCol = cardColor[Math.floor(Math.random() * cardColor.length)];\n\n    this.setState({\n      quote: randomQuote.quote,\n      author: randomQuote.author,\n      bgColor: randcol,\n      cardBgColor: randCardCol\n    }) \n    \n  }\n\n  onClickShareWithTwitter = (event) => {\n    event.preventDefault();\n    const openURL = (url) => window.open(url, 'Share', 'width=550, height=400, toolbar=0, scrollbars=1 ,location=0 ,statusbar=0,menubar=0, resizable=0');\n    const inIframe = () => { \n      try { \n        return window.self !== window.top; \n      } catch (e) { \n        return true; \n      } \n    }\n    if(!inIframe()) {\n      return openURL(`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${encodeURIComponent(`\"${this.state.quote}\" ${this.state.author}`)}`);\n    }\n  }\n  \n  render() {\n    const { quote, author, isLoading } = this.state\n    return (\n      <AppContainer color={this.state.bgColor}>\n        {\n          !isLoading ? (\n            <QuoteBox \n            quote={quote}\n            author={author}\n            bgColor={this.state.cardBgColor}\n            getRandomQuote={this.getRandomQuote}\n            onClickShareWithTwitter={this.onClickShareWithTwitter}\n          />\n          ) : (\n            <LoadingSpinner />\n          )\n        }\n      </AppContainer>\n    )\n  }\n}\n\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}